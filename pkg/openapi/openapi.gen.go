// Package psos provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	OAuth2PasswordBearerScopes = "OAuth2PasswordBearer.Scopes"
)

// BaseModel defines model for BaseModel.
type BaseModel = map[string]interface{}

// BodyLoginAccessTokenApiV1AuthLoginAccessTokenPost defines model for Body_login_access_token_api_v1_auth_login_access_token_post.
type BodyLoginAccessTokenApiV1AuthLoginAccessTokenPost struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
	GrantType    *string `json:"grant_type,omitempty"`
	Password     string  `json:"password"`
	Scope        *string `json:"scope,omitempty"`
	Username     string  `json:"username"`
}

// ComputeQuotas defines model for ComputeQuotas.
type ComputeQuotas struct {
	// Number of cores between 0 and 500
	Cores    *int `json:"cores,omitempty"`
	FixedIps *int `json:"fixed_ips,omitempty"`

	// The number of allowed floating IP addresses for each project
	FloatingIps              *int `json:"floating_ips,omitempty"`
	InjectedFileContentBytes *int `json:"injected_file_content_bytes,omitempty"`
	InjectedFilePathBytes    *int `json:"injected_file_path_bytes,omitempty"`
	InjectedFiles            *int `json:"injected_files,omitempty"`
	Instances                int  `json:"instances"`
	KeyPairs                 int  `json:"key_pairs"`
	MetadataItems            int  `json:"metadata_items"`

	// Maximum amount of RAM in MiB
	Ram                *int `json:"ram,omitempty"`
	SecurityGroupRules *int `json:"security_group_rules,omitempty"`
	SecurityGroups     *int `json:"security_groups,omitempty"`
	ServerGroupMembers *int `json:"server_group_members,omitempty"`
	ServerGroups       int  `json:"server_groups"`
}

// CreateOpenStackUser defines model for CreateOpenStackUser.
type CreateOpenStackUser struct {
	// Option to set the users default project via the project id
	DefaultProject *string `json:"default_project,omitempty"`

	// Description of the pluscloud open user
	Description string `json:"description"`
	Enabled     *bool  `json:"enabled,omitempty"`

	// E-Mail to login into the pluscloud open
	Name     string `json:"name"`
	Password string              `json:"password"`
}

// CreatedOpenStackUser defines model for CreatedOpenStackUser.
type CreatedOpenStackUser struct {
	// Option to set the users default project via the project id
	DefaultProject *string `json:"default_project,omitempty"`

	// Description of the pluscloud open user
	Description string `json:"description"`
	Enabled     *bool  `json:"enabled,omitempty"`
	Id          string `json:"id"`

	// E-Mail to login into the pluscloud open
	Name string `json:"name"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// ListAPIResponseCreatedOpenStackUser defines model for ListAPIResponse_CreatedOpenStackUser_.
type ListAPIResponseCreatedOpenStackUser struct {
	Data    *[]CreatedOpenStackUser `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Status  int                     `json:"status"`
}

// ListAPIResponseProjectCreatedResponse defines model for ListAPIResponse_ProjectCreatedResponse_.
type ListAPIResponseProjectCreatedResponse struct {
	Data    *[]ProjectCreatedResponse `json:"data,omitempty"`
	Message *string                   `json:"message,omitempty"`
	Status  int                       `json:"status"`
}

// ListAPIResponseProjectUser defines model for ListAPIResponse_ProjectUser_.
type ListAPIResponseProjectUser struct {
	Data    *[]ProjectUser `json:"data,omitempty"`
	Message *string        `json:"message,omitempty"`
	Status  int            `json:"status"`
}

// NetworkQuotas defines model for NetworkQuotas.
type NetworkQuotas struct {
	// The number of floating IP addresses allowed for each project.A value of -1 means no limit
	Floatingip *int `json:"floatingip,omitempty"`
	Network    int  `json:"network"`
	Port       *int `json:"port,omitempty"`

	// The number of role-based access control (RBAC) policies for each project
	RbacPolicy        *int `json:"rbac_policy,omitempty"`
	Router            int  `json:"router"`
	SecurityGroup     int  `json:"security_group"`
	SecurityGroupRule int  `json:"security_group_rule"`
	Subnet            int  `json:"subnet"`
	Subnetpool        *int `json:"subnetpool,omitempty"`
}

// ProjectCreate defines model for ProjectCreate.
type ProjectCreate struct {
	// Description of the pluscloud open project
	Description string `json:"description"`

	// Enables or disables the pluscloud open project
	Enabled *bool `json:"enabled,omitempty"`

	// Name of the pluscloud open project. A customer related prefix will be automatically appended
	Name string `json:"name"`

	// Preconfigures the pluscloudopen project with a ready to work environment by automatically supplying one router,subnet,network and secgroups
	NetworkPreconfigure *bool `json:"network_preconfigure,omitempty"`
}

// ProjectCreatedResponse defines model for ProjectCreatedResponse.
type ProjectCreatedResponse struct {
	// Description of the pluscloud open project
	Description string `json:"description"`

	// Enables or disables the pluscloud open project
	Enabled *bool `json:"enabled,omitempty"`

	// The pluscloud open project id
	Id string `json:"id"`

	// Name of the pluscloud open project. A customer related prefix will be automatically appended
	Name string `json:"name"`
}

// ProjectUpdate defines model for ProjectUpdate.
type ProjectUpdate struct {
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ProjectUser defines model for ProjectUser.
type ProjectUser struct {
	// The pluscloud open project id
	Project string `json:"project"`

	// The pluscloud open user id
	User string `json:"user"`
}

// SingleAPIResponse defines model for SingleAPIResponse.
type SingleAPIResponse struct {
	Data    *BaseModel `json:"data,omitempty"`
	Message *string    `json:"message,omitempty"`
	Status  int        `json:"status"`
}

// SingleAPIResponseCreatedOpenStackUser defines model for SingleAPIResponse_CreatedOpenStackUser_.
type SingleAPIResponseCreatedOpenStackUser struct {
	Data    *CreatedOpenStackUser `json:"data,omitempty"`
	Message *string               `json:"message,omitempty"`
	Status  int                   `json:"status"`
}

// SingleAPIResponseProjectCreatedResponse defines model for SingleAPIResponse_ProjectCreatedResponse_.
type SingleAPIResponseProjectCreatedResponse struct {
	Data    *ProjectCreatedResponse `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
	Status  int                     `json:"status"`
}

// SingleAPIResponseUpdateQuota defines model for SingleAPIResponse_UpdateQuota_.
type SingleAPIResponseUpdateQuota struct {
	Data    *UpdateQuota `json:"data,omitempty"`
	Message *string      `json:"message,omitempty"`
	Status  int          `json:"status"`
}

// Token defines model for Token.
type Token struct {
	AccessToken string `json:"access_token"`
	TokenType   string `json:"token_type"`
}

// UpdateOpenStackUser defines model for UpdateOpenStackUser.
type UpdateOpenStackUser struct {
	// Option to set the users default project via the project id
	DefaultProject *string `json:"default_project,omitempty"`

	// Description of the pluscloud open user
	Description *string `json:"description,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`

	// E-Mail to login into the pluscloud open
	Name     *string `json:"name,omitempty"`
	Password *string              `json:"password,omitempty"`
}

// UpdateQuota defines model for UpdateQuota.
type UpdateQuota struct {
	Compute *ComputeQuotas `json:"compute,omitempty"`
	Network *NetworkQuotas `json:"network,omitempty"`
	Volume  *VolumeQuotas  `json:"volume,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []string `json:"loc"`
	Msg  string   `json:"msg"`
	Type string   `json:"type"`
}

// VaultUser defines model for VaultUser.
type VaultUser struct {
	DomainId      string      `json:"domain_id"`
	ProjectPrefix string      `json:"project_prefix"`
	Username      interface{} `json:"username"`
}

// VolumeQuotas defines model for VolumeQuotas.
type VolumeQuotas struct {
	BackupGigabytes int `json:"backup_gigabytes"`
	Backups         int `json:"backups"`

	// Maximum amount of available Storage
	Gigabytes          *int `json:"gigabytes,omitempty"`
	Groups             *int `json:"groups,omitempty"`
	PerVolumeGigabytes *int `json:"per_volume_gigabytes,omitempty"`

	// Maximum amount of snapshots
	Snapshots *int `json:"snapshots,omitempty"`
	Volumes   int  `json:"volumes"`
}

// CreateProjectApiV1ProjectPostJSONBody defines parameters for CreateProjectApiV1ProjectPost.
type CreateProjectApiV1ProjectPostJSONBody = ProjectCreate

// UpdateProjectApiV1ProjectProjectIdPutJSONBody defines parameters for UpdateProjectApiV1ProjectProjectIdPut.
type UpdateProjectApiV1ProjectProjectIdPutJSONBody = ProjectUpdate

// UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONBody defines parameters for UpdateQuotaApiV1ProjectProjectIdQuotaPut.
type UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONBody = UpdateQuota

// CreateUserApiV1UserPostJSONBody defines parameters for CreateUserApiV1UserPost.
type CreateUserApiV1UserPostJSONBody = CreateOpenStackUser

// UpdateUserApiV1UserUserIdPutJSONBody defines parameters for UpdateUserApiV1UserUserIdPut.
type UpdateUserApiV1UserUserIdPutJSONBody = UpdateOpenStackUser

// CreateProjectApiV1ProjectPostJSONRequestBody defines body for CreateProjectApiV1ProjectPost for application/json ContentType.
type CreateProjectApiV1ProjectPostJSONRequestBody = CreateProjectApiV1ProjectPostJSONBody

// UpdateProjectApiV1ProjectProjectIdPutJSONRequestBody defines body for UpdateProjectApiV1ProjectProjectIdPut for application/json ContentType.
type UpdateProjectApiV1ProjectProjectIdPutJSONRequestBody = UpdateProjectApiV1ProjectProjectIdPutJSONBody

// UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONRequestBody defines body for UpdateQuotaApiV1ProjectProjectIdQuotaPut for application/json ContentType.
type UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONRequestBody = UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONBody

// CreateUserApiV1UserPostJSONRequestBody defines body for CreateUserApiV1UserPost for application/json ContentType.
type CreateUserApiV1UserPostJSONRequestBody = CreateUserApiV1UserPostJSONBody

// UpdateUserApiV1UserUserIdPutJSONRequestBody defines body for UpdateUserApiV1UserUserIdPut for application/json ContentType.
type UpdateUserApiV1UserUserIdPutJSONRequestBody = UpdateUserApiV1UserUserIdPutJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginAccessTokenApiV1AuthLoginAccessTokenPost request with any body
	LoginAccessTokenApiV1AuthLoginAccessTokenPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestTokenApiV1AuthLoginTestTokenPost request
	TestTokenApiV1AuthLoginTestTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjectsApiV1ProjectGet request
	ListProjectsApiV1ProjectGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectApiV1ProjectPost request with any body
	CreateProjectApiV1ProjectPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectApiV1ProjectPost(ctx context.Context, body CreateProjectApiV1ProjectPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectApiV1ProjectProjectIdDelete request
	DeleteProjectApiV1ProjectProjectIdDelete(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectApiV1ProjectProjectIdGet request
	GetProjectApiV1ProjectProjectIdGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProjectApiV1ProjectProjectIdPut request with any body
	UpdateProjectApiV1ProjectProjectIdPutWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProjectApiV1ProjectProjectIdPut(ctx context.Context, projectId string, body UpdateProjectApiV1ProjectProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetQuotaApiV1ProjectProjectIdQuotaGet request
	GetQuotaApiV1ProjectProjectIdQuotaGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateQuotaApiV1ProjectProjectIdQuotaPut request with any body
	UpdateQuotaApiV1ProjectProjectIdQuotaPutWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateQuotaApiV1ProjectProjectIdQuotaPut(ctx context.Context, projectId string, body UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserForProjectApiV1ProjectProjectIdUserGet request
	GetUserForProjectApiV1ProjectProjectIdUserGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDelete request
	RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDelete(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUserToProjectApiV1ProjectProjectIdUserUserIdPost request
	AddUserToProjectApiV1ProjectProjectIdUserUserIdPost(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsersApiV1UserGet request
	ListUsersApiV1UserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserApiV1UserPost request with any body
	CreateUserApiV1UserPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserApiV1UserPost(ctx context.Context, body CreateUserApiV1UserPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserApiV1UserUserIdDelete request
	DeleteUserApiV1UserUserIdDelete(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserApiV1UserUserIdGet request
	GetUserApiV1UserUserIdGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserApiV1UserUserIdPut request with any body
	UpdateUserApiV1UserUserIdPutWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserApiV1UserUserIdPut(ctx context.Context, userId string, body UpdateUserApiV1UserUserIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginAccessTokenApiV1AuthLoginAccessTokenPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginAccessTokenApiV1AuthLoginAccessTokenPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestTokenApiV1AuthLoginTestTokenPost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestTokenApiV1AuthLoginTestTokenPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjectsApiV1ProjectGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectsApiV1ProjectGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectApiV1ProjectPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectApiV1ProjectPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectApiV1ProjectPost(ctx context.Context, body CreateProjectApiV1ProjectPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectApiV1ProjectPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectApiV1ProjectProjectIdDelete(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectApiV1ProjectProjectIdDeleteRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectApiV1ProjectProjectIdGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectApiV1ProjectProjectIdGetRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectApiV1ProjectProjectIdPutWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectApiV1ProjectProjectIdPutRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectApiV1ProjectProjectIdPut(ctx context.Context, projectId string, body UpdateProjectApiV1ProjectProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectApiV1ProjectProjectIdPutRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetQuotaApiV1ProjectProjectIdQuotaGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetQuotaApiV1ProjectProjectIdQuotaGetRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateQuotaApiV1ProjectProjectIdQuotaPutWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateQuotaApiV1ProjectProjectIdQuotaPutRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateQuotaApiV1ProjectProjectIdQuotaPut(ctx context.Context, projectId string, body UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateQuotaApiV1ProjectProjectIdQuotaPutRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserForProjectApiV1ProjectProjectIdUserGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserForProjectApiV1ProjectProjectIdUserGetRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDelete(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteRequest(c.Server, projectId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserToProjectApiV1ProjectProjectIdUserUserIdPost(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUserToProjectApiV1ProjectProjectIdUserUserIdPostRequest(c.Server, projectId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsersApiV1UserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersApiV1UserGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserApiV1UserPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserApiV1UserPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserApiV1UserPost(ctx context.Context, body CreateUserApiV1UserPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserApiV1UserPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserApiV1UserUserIdDelete(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserApiV1UserUserIdDeleteRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserApiV1UserUserIdGet(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserApiV1UserUserIdGetRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserApiV1UserUserIdPutWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserApiV1UserUserIdPutRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserApiV1UserUserIdPut(ctx context.Context, userId string, body UpdateUserApiV1UserUserIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserApiV1UserUserIdPutRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginAccessTokenApiV1AuthLoginAccessTokenPostRequestWithBody generates requests for LoginAccessTokenApiV1AuthLoginAccessTokenPost with any type of body
func NewLoginAccessTokenApiV1AuthLoginAccessTokenPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/login/access-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestTokenApiV1AuthLoginTestTokenPostRequest generates requests for TestTokenApiV1AuthLoginTestTokenPost
func NewTestTokenApiV1AuthLoginTestTokenPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/login/test-token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProjectsApiV1ProjectGetRequest generates requests for ListProjectsApiV1ProjectGet
func NewListProjectsApiV1ProjectGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectApiV1ProjectPostRequest calls the generic CreateProjectApiV1ProjectPost builder with application/json body
func NewCreateProjectApiV1ProjectPostRequest(server string, body CreateProjectApiV1ProjectPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectApiV1ProjectPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectApiV1ProjectPostRequestWithBody generates requests for CreateProjectApiV1ProjectPost with any type of body
func NewCreateProjectApiV1ProjectPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectApiV1ProjectProjectIdDeleteRequest generates requests for DeleteProjectApiV1ProjectProjectIdDelete
func NewDeleteProjectApiV1ProjectProjectIdDeleteRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectApiV1ProjectProjectIdGetRequest generates requests for GetProjectApiV1ProjectProjectIdGet
func NewGetProjectApiV1ProjectProjectIdGetRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProjectApiV1ProjectProjectIdPutRequest calls the generic UpdateProjectApiV1ProjectProjectIdPut builder with application/json body
func NewUpdateProjectApiV1ProjectProjectIdPutRequest(server string, projectId string, body UpdateProjectApiV1ProjectProjectIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectApiV1ProjectProjectIdPutRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewUpdateProjectApiV1ProjectProjectIdPutRequestWithBody generates requests for UpdateProjectApiV1ProjectProjectIdPut with any type of body
func NewUpdateProjectApiV1ProjectProjectIdPutRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetQuotaApiV1ProjectProjectIdQuotaGetRequest generates requests for GetQuotaApiV1ProjectProjectIdQuotaGet
func NewGetQuotaApiV1ProjectProjectIdQuotaGetRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s/quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateQuotaApiV1ProjectProjectIdQuotaPutRequest calls the generic UpdateQuotaApiV1ProjectProjectIdQuotaPut builder with application/json body
func NewUpdateQuotaApiV1ProjectProjectIdQuotaPutRequest(server string, projectId string, body UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateQuotaApiV1ProjectProjectIdQuotaPutRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewUpdateQuotaApiV1ProjectProjectIdQuotaPutRequestWithBody generates requests for UpdateQuotaApiV1ProjectProjectIdQuotaPut with any type of body
func NewUpdateQuotaApiV1ProjectProjectIdQuotaPutRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s/quota", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserForProjectApiV1ProjectProjectIdUserGetRequest generates requests for GetUserForProjectApiV1ProjectProjectIdUserGet
func NewGetUserForProjectApiV1ProjectProjectIdUserGetRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s/user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteRequest generates requests for RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDelete
func NewRemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteRequest(server string, projectId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserToProjectApiV1ProjectProjectIdUserUserIdPostRequest generates requests for AddUserToProjectApiV1ProjectProjectIdUserUserIdPost
func NewAddUserToProjectApiV1ProjectProjectIdUserUserIdPostRequest(server string, projectId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/project/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsersApiV1UserGetRequest generates requests for ListUsersApiV1UserGet
func NewListUsersApiV1UserGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserApiV1UserPostRequest calls the generic CreateUserApiV1UserPost builder with application/json body
func NewCreateUserApiV1UserPostRequest(server string, body CreateUserApiV1UserPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserApiV1UserPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserApiV1UserPostRequestWithBody generates requests for CreateUserApiV1UserPost with any type of body
func NewCreateUserApiV1UserPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserApiV1UserUserIdDeleteRequest generates requests for DeleteUserApiV1UserUserIdDelete
func NewDeleteUserApiV1UserUserIdDeleteRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserApiV1UserUserIdGetRequest generates requests for GetUserApiV1UserUserIdGet
func NewGetUserApiV1UserUserIdGetRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserApiV1UserUserIdPutRequest calls the generic UpdateUserApiV1UserUserIdPut builder with application/json body
func NewUpdateUserApiV1UserUserIdPutRequest(server string, userId string, body UpdateUserApiV1UserUserIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserApiV1UserUserIdPutRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUpdateUserApiV1UserUserIdPutRequestWithBody generates requests for UpdateUserApiV1UserUserIdPut with any type of body
func NewUpdateUserApiV1UserUserIdPutRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginAccessTokenApiV1AuthLoginAccessTokenPost request with any body
	LoginAccessTokenApiV1AuthLoginAccessTokenPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse, error)

	// TestTokenApiV1AuthLoginTestTokenPost request
	TestTokenApiV1AuthLoginTestTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestTokenApiV1AuthLoginTestTokenPostResponse, error)

	// ListProjectsApiV1ProjectGet request
	ListProjectsApiV1ProjectGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProjectsApiV1ProjectGetResponse, error)

	// CreateProjectApiV1ProjectPost request with any body
	CreateProjectApiV1ProjectPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectApiV1ProjectPostResponse, error)

	CreateProjectApiV1ProjectPostWithResponse(ctx context.Context, body CreateProjectApiV1ProjectPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectApiV1ProjectPostResponse, error)

	// DeleteProjectApiV1ProjectProjectIdDelete request
	DeleteProjectApiV1ProjectProjectIdDeleteWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectApiV1ProjectProjectIdDeleteResponse, error)

	// GetProjectApiV1ProjectProjectIdGet request
	GetProjectApiV1ProjectProjectIdGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectApiV1ProjectProjectIdGetResponse, error)

	// UpdateProjectApiV1ProjectProjectIdPut request with any body
	UpdateProjectApiV1ProjectProjectIdPutWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectApiV1ProjectProjectIdPutResponse, error)

	UpdateProjectApiV1ProjectProjectIdPutWithResponse(ctx context.Context, projectId string, body UpdateProjectApiV1ProjectProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectApiV1ProjectProjectIdPutResponse, error)

	// GetQuotaApiV1ProjectProjectIdQuotaGet request
	GetQuotaApiV1ProjectProjectIdQuotaGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetQuotaApiV1ProjectProjectIdQuotaGetResponse, error)

	// UpdateQuotaApiV1ProjectProjectIdQuotaPut request with any body
	UpdateQuotaApiV1ProjectProjectIdQuotaPutWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse, error)

	UpdateQuotaApiV1ProjectProjectIdQuotaPutWithResponse(ctx context.Context, projectId string, body UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse, error)

	// GetUserForProjectApiV1ProjectProjectIdUserGet request
	GetUserForProjectApiV1ProjectProjectIdUserGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetUserForProjectApiV1ProjectProjectIdUserGetResponse, error)

	// RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDelete request
	RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse, error)

	// AddUserToProjectApiV1ProjectProjectIdUserUserIdPost request
	AddUserToProjectApiV1ProjectProjectIdUserUserIdPostWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse, error)

	// ListUsersApiV1UserGet request
	ListUsersApiV1UserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListUsersApiV1UserGetResponse, error)

	// CreateUserApiV1UserPost request with any body
	CreateUserApiV1UserPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserApiV1UserPostResponse, error)

	CreateUserApiV1UserPostWithResponse(ctx context.Context, body CreateUserApiV1UserPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserApiV1UserPostResponse, error)

	// DeleteUserApiV1UserUserIdDelete request
	DeleteUserApiV1UserUserIdDeleteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserApiV1UserUserIdDeleteResponse, error)

	// GetUserApiV1UserUserIdGet request
	GetUserApiV1UserUserIdGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserApiV1UserUserIdGetResponse, error)

	// UpdateUserApiV1UserUserIdPut request with any body
	UpdateUserApiV1UserUserIdPutWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserApiV1UserUserIdPutResponse, error)

	UpdateUserApiV1UserUserIdPutWithResponse(ctx context.Context, userId string, body UpdateUserApiV1UserUserIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserApiV1UserUserIdPutResponse, error)
}

type LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Token
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestTokenApiV1AuthLoginTestTokenPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VaultUser
}

// Status returns HTTPResponse.Status
func (r TestTokenApiV1AuthLoginTestTokenPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestTokenApiV1AuthLoginTestTokenPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectsApiV1ProjectGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAPIResponseProjectCreatedResponse
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r ListProjectsApiV1ProjectGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectsApiV1ProjectGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectApiV1ProjectPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SingleAPIResponseProjectCreatedResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectApiV1ProjectPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectApiV1ProjectPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectApiV1ProjectProjectIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *SingleAPIResponse
	JSON405      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProjectApiV1ProjectProjectIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectApiV1ProjectProjectIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectApiV1ProjectProjectIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleAPIResponseProjectCreatedResponse
	JSON404      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectApiV1ProjectProjectIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectApiV1ProjectProjectIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectApiV1ProjectProjectIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleAPIResponseProjectCreatedResponse
	JSON400      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProjectApiV1ProjectProjectIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectApiV1ProjectProjectIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetQuotaApiV1ProjectProjectIdQuotaGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleAPIResponseUpdateQuota
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetQuotaApiV1ProjectProjectIdQuotaGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetQuotaApiV1ProjectProjectIdQuotaGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleAPIResponseUpdateQuota
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserForProjectApiV1ProjectProjectIdUserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAPIResponseProjectUser
	JSON404      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r GetUserForProjectApiV1ProjectProjectIdUserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserForProjectApiV1ProjectProjectIdUserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersApiV1UserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAPIResponseCreatedOpenStackUser
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r ListUsersApiV1UserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersApiV1UserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserApiV1UserPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SingleAPIResponseCreatedOpenStackUser
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r CreateUserApiV1UserPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserApiV1UserPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserApiV1UserUserIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserApiV1UserUserIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserApiV1UserUserIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserApiV1UserUserIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleAPIResponseCreatedOpenStackUser
	JSON404      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r GetUserApiV1UserUserIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserApiV1UserUserIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserApiV1UserUserIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleAPIResponseCreatedOpenStackUser
	JSON404      *SingleAPIResponse
	JSON422      *HTTPValidationError
	JSON500      *SingleAPIResponse
}

// Status returns HTTPResponse.Status
func (r UpdateUserApiV1UserUserIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserApiV1UserUserIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginAccessTokenApiV1AuthLoginAccessTokenPostWithBodyWithResponse request with arbitrary body returning *LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse
func (c *ClientWithResponses) LoginAccessTokenApiV1AuthLoginAccessTokenPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse, error) {
	rsp, err := c.LoginAccessTokenApiV1AuthLoginAccessTokenPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginAccessTokenApiV1AuthLoginAccessTokenPostResponse(rsp)
}

// TestTokenApiV1AuthLoginTestTokenPostWithResponse request returning *TestTokenApiV1AuthLoginTestTokenPostResponse
func (c *ClientWithResponses) TestTokenApiV1AuthLoginTestTokenPostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TestTokenApiV1AuthLoginTestTokenPostResponse, error) {
	rsp, err := c.TestTokenApiV1AuthLoginTestTokenPost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestTokenApiV1AuthLoginTestTokenPostResponse(rsp)
}

// ListProjectsApiV1ProjectGetWithResponse request returning *ListProjectsApiV1ProjectGetResponse
func (c *ClientWithResponses) ListProjectsApiV1ProjectGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProjectsApiV1ProjectGetResponse, error) {
	rsp, err := c.ListProjectsApiV1ProjectGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectsApiV1ProjectGetResponse(rsp)
}

// CreateProjectApiV1ProjectPostWithBodyWithResponse request with arbitrary body returning *CreateProjectApiV1ProjectPostResponse
func (c *ClientWithResponses) CreateProjectApiV1ProjectPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectApiV1ProjectPostResponse, error) {
	rsp, err := c.CreateProjectApiV1ProjectPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectApiV1ProjectPostResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectApiV1ProjectPostWithResponse(ctx context.Context, body CreateProjectApiV1ProjectPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectApiV1ProjectPostResponse, error) {
	rsp, err := c.CreateProjectApiV1ProjectPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectApiV1ProjectPostResponse(rsp)
}

// DeleteProjectApiV1ProjectProjectIdDeleteWithResponse request returning *DeleteProjectApiV1ProjectProjectIdDeleteResponse
func (c *ClientWithResponses) DeleteProjectApiV1ProjectProjectIdDeleteWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*DeleteProjectApiV1ProjectProjectIdDeleteResponse, error) {
	rsp, err := c.DeleteProjectApiV1ProjectProjectIdDelete(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectApiV1ProjectProjectIdDeleteResponse(rsp)
}

// GetProjectApiV1ProjectProjectIdGetWithResponse request returning *GetProjectApiV1ProjectProjectIdGetResponse
func (c *ClientWithResponses) GetProjectApiV1ProjectProjectIdGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetProjectApiV1ProjectProjectIdGetResponse, error) {
	rsp, err := c.GetProjectApiV1ProjectProjectIdGet(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectApiV1ProjectProjectIdGetResponse(rsp)
}

// UpdateProjectApiV1ProjectProjectIdPutWithBodyWithResponse request with arbitrary body returning *UpdateProjectApiV1ProjectProjectIdPutResponse
func (c *ClientWithResponses) UpdateProjectApiV1ProjectProjectIdPutWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectApiV1ProjectProjectIdPutResponse, error) {
	rsp, err := c.UpdateProjectApiV1ProjectProjectIdPutWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectApiV1ProjectProjectIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateProjectApiV1ProjectProjectIdPutWithResponse(ctx context.Context, projectId string, body UpdateProjectApiV1ProjectProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectApiV1ProjectProjectIdPutResponse, error) {
	rsp, err := c.UpdateProjectApiV1ProjectProjectIdPut(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectApiV1ProjectProjectIdPutResponse(rsp)
}

// GetQuotaApiV1ProjectProjectIdQuotaGetWithResponse request returning *GetQuotaApiV1ProjectProjectIdQuotaGetResponse
func (c *ClientWithResponses) GetQuotaApiV1ProjectProjectIdQuotaGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetQuotaApiV1ProjectProjectIdQuotaGetResponse, error) {
	rsp, err := c.GetQuotaApiV1ProjectProjectIdQuotaGet(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetQuotaApiV1ProjectProjectIdQuotaGetResponse(rsp)
}

// UpdateQuotaApiV1ProjectProjectIdQuotaPutWithBodyWithResponse request with arbitrary body returning *UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse
func (c *ClientWithResponses) UpdateQuotaApiV1ProjectProjectIdQuotaPutWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse, error) {
	rsp, err := c.UpdateQuotaApiV1ProjectProjectIdQuotaPutWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateQuotaApiV1ProjectProjectIdQuotaPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateQuotaApiV1ProjectProjectIdQuotaPutWithResponse(ctx context.Context, projectId string, body UpdateQuotaApiV1ProjectProjectIdQuotaPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse, error) {
	rsp, err := c.UpdateQuotaApiV1ProjectProjectIdQuotaPut(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateQuotaApiV1ProjectProjectIdQuotaPutResponse(rsp)
}

// GetUserForProjectApiV1ProjectProjectIdUserGetWithResponse request returning *GetUserForProjectApiV1ProjectProjectIdUserGetResponse
func (c *ClientWithResponses) GetUserForProjectApiV1ProjectProjectIdUserGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*GetUserForProjectApiV1ProjectProjectIdUserGetResponse, error) {
	rsp, err := c.GetUserForProjectApiV1ProjectProjectIdUserGet(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserForProjectApiV1ProjectProjectIdUserGetResponse(rsp)
}

// RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteWithResponse request returning *RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse
func (c *ClientWithResponses) RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse, error) {
	rsp, err := c.RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDelete(ctx, projectId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse(rsp)
}

// AddUserToProjectApiV1ProjectProjectIdUserUserIdPostWithResponse request returning *AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse
func (c *ClientWithResponses) AddUserToProjectApiV1ProjectProjectIdUserUserIdPostWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse, error) {
	rsp, err := c.AddUserToProjectApiV1ProjectProjectIdUserUserIdPost(ctx, projectId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse(rsp)
}

// ListUsersApiV1UserGetWithResponse request returning *ListUsersApiV1UserGetResponse
func (c *ClientWithResponses) ListUsersApiV1UserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListUsersApiV1UserGetResponse, error) {
	rsp, err := c.ListUsersApiV1UserGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}

	return ParseListUsersApiV1UserGetResponse(rsp)
}

// CreateUserApiV1UserPostWithBodyWithResponse request with arbitrary body returning *CreateUserApiV1UserPostResponse
func (c *ClientWithResponses) CreateUserApiV1UserPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserApiV1UserPostResponse, error) {
	rsp, err := c.CreateUserApiV1UserPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserApiV1UserPostResponse(rsp)
}

func (c *ClientWithResponses) CreateUserApiV1UserPostWithResponse(ctx context.Context, body CreateUserApiV1UserPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserApiV1UserPostResponse, error) {
	rsp, err := c.CreateUserApiV1UserPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserApiV1UserPostResponse(rsp)
}

// DeleteUserApiV1UserUserIdDeleteWithResponse request returning *DeleteUserApiV1UserUserIdDeleteResponse
func (c *ClientWithResponses) DeleteUserApiV1UserUserIdDeleteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserApiV1UserUserIdDeleteResponse, error) {
	rsp, err := c.DeleteUserApiV1UserUserIdDelete(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserApiV1UserUserIdDeleteResponse(rsp)
}

// GetUserApiV1UserUserIdGetWithResponse request returning *GetUserApiV1UserUserIdGetResponse
func (c *ClientWithResponses) GetUserApiV1UserUserIdGetWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserApiV1UserUserIdGetResponse, error) {
	rsp, err := c.GetUserApiV1UserUserIdGet(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserApiV1UserUserIdGetResponse(rsp)
}

// UpdateUserApiV1UserUserIdPutWithBodyWithResponse request with arbitrary body returning *UpdateUserApiV1UserUserIdPutResponse
func (c *ClientWithResponses) UpdateUserApiV1UserUserIdPutWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserApiV1UserUserIdPutResponse, error) {
	rsp, err := c.UpdateUserApiV1UserUserIdPutWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserApiV1UserUserIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserApiV1UserUserIdPutWithResponse(ctx context.Context, userId string, body UpdateUserApiV1UserUserIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserApiV1UserUserIdPutResponse, error) {
	rsp, err := c.UpdateUserApiV1UserUserIdPut(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserApiV1UserUserIdPutResponse(rsp)
}

// ParseLoginAccessTokenApiV1AuthLoginAccessTokenPostResponse parses an HTTP response from a LoginAccessTokenApiV1AuthLoginAccessTokenPostWithResponse call
func ParseLoginAccessTokenApiV1AuthLoginAccessTokenPostResponse(rsp *http.Response) (*LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginAccessTokenApiV1AuthLoginAccessTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTestTokenApiV1AuthLoginTestTokenPostResponse parses an HTTP response from a TestTokenApiV1AuthLoginTestTokenPostWithResponse call
func ParseTestTokenApiV1AuthLoginTestTokenPostResponse(rsp *http.Response) (*TestTokenApiV1AuthLoginTestTokenPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestTokenApiV1AuthLoginTestTokenPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VaultUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProjectsApiV1ProjectGetResponse parses an HTTP response from a ListProjectsApiV1ProjectGetWithResponse call
func ParseListProjectsApiV1ProjectGetResponse(rsp *http.Response) (*ListProjectsApiV1ProjectGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectsApiV1ProjectGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAPIResponseProjectCreatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateProjectApiV1ProjectPostResponse parses an HTTP response from a CreateProjectApiV1ProjectPostWithResponse call
func ParseCreateProjectApiV1ProjectPostResponse(rsp *http.Response) (*CreateProjectApiV1ProjectPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectApiV1ProjectPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SingleAPIResponseProjectCreatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProjectApiV1ProjectProjectIdDeleteResponse parses an HTTP response from a DeleteProjectApiV1ProjectProjectIdDeleteWithResponse call
func ParseDeleteProjectApiV1ProjectProjectIdDeleteResponse(rsp *http.Response) (*DeleteProjectApiV1ProjectProjectIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectApiV1ProjectProjectIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProjectApiV1ProjectProjectIdGetResponse parses an HTTP response from a GetProjectApiV1ProjectProjectIdGetWithResponse call
func ParseGetProjectApiV1ProjectProjectIdGetResponse(rsp *http.Response) (*GetProjectApiV1ProjectProjectIdGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectApiV1ProjectProjectIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleAPIResponseProjectCreatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateProjectApiV1ProjectProjectIdPutResponse parses an HTTP response from a UpdateProjectApiV1ProjectProjectIdPutWithResponse call
func ParseUpdateProjectApiV1ProjectProjectIdPutResponse(rsp *http.Response) (*UpdateProjectApiV1ProjectProjectIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectApiV1ProjectProjectIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleAPIResponseProjectCreatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetQuotaApiV1ProjectProjectIdQuotaGetResponse parses an HTTP response from a GetQuotaApiV1ProjectProjectIdQuotaGetWithResponse call
func ParseGetQuotaApiV1ProjectProjectIdQuotaGetResponse(rsp *http.Response) (*GetQuotaApiV1ProjectProjectIdQuotaGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetQuotaApiV1ProjectProjectIdQuotaGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleAPIResponseUpdateQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateQuotaApiV1ProjectProjectIdQuotaPutResponse parses an HTTP response from a UpdateQuotaApiV1ProjectProjectIdQuotaPutWithResponse call
func ParseUpdateQuotaApiV1ProjectProjectIdQuotaPutResponse(rsp *http.Response) (*UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateQuotaApiV1ProjectProjectIdQuotaPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleAPIResponseUpdateQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserForProjectApiV1ProjectProjectIdUserGetResponse parses an HTTP response from a GetUserForProjectApiV1ProjectProjectIdUserGetWithResponse call
func ParseGetUserForProjectApiV1ProjectProjectIdUserGetResponse(rsp *http.Response) (*GetUserForProjectApiV1ProjectProjectIdUserGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserForProjectApiV1ProjectProjectIdUserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAPIResponseProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse parses an HTTP response from a RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteWithResponse call
func ParseRemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse(rsp *http.Response) (*RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserFromProjectApiV1ProjectProjectIdUserUserIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse parses an HTTP response from a AddUserToProjectApiV1ProjectProjectIdUserUserIdPostWithResponse call
func ParseAddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse(rsp *http.Response) (*AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUserToProjectApiV1ProjectProjectIdUserUserIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListUsersApiV1UserGetResponse parses an HTTP response from a ListUsersApiV1UserGetWithResponse call
func ParseListUsersApiV1UserGetResponse(rsp *http.Response) (*ListUsersApiV1UserGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersApiV1UserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAPIResponseCreatedOpenStackUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}

		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateUserApiV1UserPostResponse parses an HTTP response from a CreateUserApiV1UserPostWithResponse call
func ParseCreateUserApiV1UserPostResponse(rsp *http.Response) (*CreateUserApiV1UserPostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserApiV1UserPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SingleAPIResponseCreatedOpenStackUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUserApiV1UserUserIdDeleteResponse parses an HTTP response from a DeleteUserApiV1UserUserIdDeleteWithResponse call
func ParseDeleteUserApiV1UserUserIdDeleteResponse(rsp *http.Response) (*DeleteUserApiV1UserUserIdDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserApiV1UserUserIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserApiV1UserUserIdGetResponse parses an HTTP response from a GetUserApiV1UserUserIdGetWithResponse call
func ParseGetUserApiV1UserUserIdGetResponse(rsp *http.Response) (*GetUserApiV1UserUserIdGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserApiV1UserUserIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleAPIResponseCreatedOpenStackUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateUserApiV1UserUserIdPutResponse parses an HTTP response from a UpdateUserApiV1UserUserIdPutWithResponse call
func ParseUpdateUserApiV1UserUserIdPutResponse(rsp *http.Response) (*UpdateUserApiV1UserUserIdPutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserApiV1UserUserIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleAPIResponseCreatedOpenStackUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest SingleAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
